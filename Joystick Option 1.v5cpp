{"mode":"Text","textContent":"// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0, Controller2_precision = 0;\n\nfloat Sensitivity;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Arm.setStopping(hold);\n  Claw.setStopping(hold);\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted2() {\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.setTurnVelocity(50.0, percent);\n  return 0;\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToController1_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Controller1_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  Sensitivity = 1.0;\n  if (Controller1.ButtonX.pressing()) {\n    Drivetrain.setDriveVelocity((Sensitivity + 10.0), percent);\n    Controller1.Screen.print(printToController1_numberFormat(), static_cast<float>(Sensitivity));\n  }\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n\n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\ntask rc_auto_loop_task_Controller2(rc_auto_loop_function_Controller2);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  vex::task ws1(whenStarted2);\n  whenStarted1();\n}","textLanguage":"cpp","rconfig":[{"port":[3],"name":"Claw","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"Close","rev":"Open","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"Arm","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"Down","rev":"Up","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[],"name":"Controller2","customName":false,"deviceType":"Controller","setting":{"left":"Arm","leftDir":"false","right":"Claw","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"partner"},"triportSourcePort":22},{"port":[2,1,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm"},"triportSourcePort":null}],"slot":0,"platform":"V5","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":""}